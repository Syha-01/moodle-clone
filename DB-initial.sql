-- Mock Moodle Database Schema for Supabase
-- This script creates tables for courses, levels, subjects, quizzes, questions, and user interactions.

-- 1. COURSES TABLE
-- Stores top-level courses like 'Information Technology'.
CREATE TABLE public.courses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.courses IS 'Stores the main courses or fields of study.';

-- 2. LEVELS TABLE
-- Stores academic levels like 'Bachelors Degree'.
CREATE TABLE public.levels (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.levels IS 'Stores academic or difficulty levels.';

-- 3. PROFILES TABLE
-- Stores public user data and links to the authentication service.
CREATE TABLE public.profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name TEXT,
    role TEXT NOT NULL DEFAULT 'student'
);

COMMENT ON TABLE public.profiles IS 'Stores public user data and application-specific roles.';

-- 4. SUBJECTS TABLE
-- Connects courses and levels to specific subjects like 'Networking'.
CREATE TABLE public.subjects (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    course_id BIGINT NOT NULL REFERENCES public.courses(id) ON DELETE CASCADE,
    level_id BIGINT NOT NULL REFERENCES public.levels(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE(name, course_id, level_id)
);

COMMENT ON TABLE public.subjects IS 'Links a course and a level to a specific subject.';

-- 5. QUIZZES TABLE
-- Stores quiz metadata.
CREATE TABLE public.quizzes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    subject_id BIGINT NOT NULL REFERENCES public.subjects(id) ON DELETE CASCADE,
    author_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    time_limit_minutes INTEGER NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.quizzes IS 'Contains the core information for each quiz.';

-- 6. QUESTIONS TABLE
-- Stores individual questions for quizzes.
CREATE TABLE public.questions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    quiz_id BIGINT NOT NULL REFERENCES public.quizzes(id) ON DELETE CASCADE,
    question_text TEXT NOT NULL,
    question_type TEXT NOT NULL, -- e.g., 'multiple_choice' or 'short_answer'
    image_url TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.questions IS 'Stores all individual questions for the quizzes.';

-- 7. OPTIONS TABLE
-- Stores answer choices for multiple-choice questions.
CREATE TABLE public.options (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    question_id BIGINT NOT NULL REFERENCES public.questions(id) ON DELETE CASCADE,
    option_text TEXT NOT NULL,
    is_correct BOOLEAN NOT NULL DEFAULT FALSE
);

COMMENT ON TABLE public.options IS 'Stores the answer choices for multiple-choice questions.';

-- 8. QUIZ_ATTEMPTS TABLE
-- Tracks each time a student attempts a quiz.
CREATE TABLE public.quiz_attempts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    quiz_id BIGINT NOT NULL REFERENCES public.quizzes(id) ON DELETE CASCADE,
    start_time TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    end_time TIMESTAMPTZ,
    score INTEGER,
    UNIQUE(user_id, quiz_id, start_time)
);

COMMENT ON TABLE public.quiz_attempts IS 'Tracks every time a student starts a quiz.';

-- 9. USER_ANSWERS TABLE
-- Stores the specific answers a user provides during an attempt.
CREATE TABLE public.user_answers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    quiz_attempt_id BIGINT NOT NULL REFERENCES public.quiz_attempts(id) ON DELETE CASCADE,
    question_id BIGINT NOT NULL REFERENCES public.questions(id) ON DELETE CASCADE,
    selected_option_id BIGINT REFERENCES public.options(id) ON DELETE SET NULL, -- For multiple choice
    short_answer_text TEXT, -- For short answers
    is_correct BOOLEAN
);

COMMENT ON TABLE public.user_answers IS 'Stores the specific answers a user provides for each question.';


--- SETUP FOR USER MANAGEMENT & STORAGE ---

-- 1. FUNCTION TO CREATE A PROFILE ON NEW USER SIGNUP
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, role)
  VALUES (new.id, 'student');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 2. TRIGGER TO CALL THE FUNCTION ON SIGNUP
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- 3. SETUP STORAGE FOR QUESTION IMAGES
-- Create a bucket for question images with public read access.
INSERT INTO storage.buckets (id, name, public)
VALUES ('question_images', 'question_images', true)
ON CONFLICT (id) DO NOTHING;


--- ROW LEVEL SECURITY (RLS) POLICIES ---
-- It's crucial to enable RLS on each table and define policies.
-- These are basic policies to get you started.

-- Enable RLS for all tables
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.courses ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.levels ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.subjects ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.quizzes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.questions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.options ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.quiz_attempts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_answers ENABLE ROW LEVEL SECURITY;

-- Policies for profiles
CREATE POLICY "Users can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- Policies for courses, levels, subjects (Allow public read access)
CREATE POLICY "Allow public read access to courses" ON public.courses FOR SELECT USING (true);
CREATE POLICY "Allow public read access to levels" ON public.levels FOR SELECT USING (true);
CREATE POLICY "Allow public read access to subjects" ON public.subjects FOR SELECT USING (true);
CREATE POLICY "Admins can manage courses, levels, subjects" ON public.courses FOR ALL USING ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin') WITH CHECK ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin');
CREATE POLICY "Admins can manage levels" ON public.levels FOR ALL USING ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin') WITH CHECK ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin');
CREATE POLICY "Admins can manage subjects" ON public.subjects FOR ALL USING ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin') WITH CHECK ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin');


-- Policies for quizzes, questions, options
CREATE POLICY "Allow authenticated users to read quizzes and their content" ON public.quizzes FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Allow authenticated users to read questions" ON public.questions FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Allow authenticated users to read options" ON public.options FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Admins can manage quizzes and their content" ON public.quizzes FOR ALL USING ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin') WITH CHECK ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin');
CREATE POLICY "Admins can manage questions" ON public.questions FOR ALL USING ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin') WITH CHECK ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin');
CREATE POLICY "Admins can manage options" ON public.options FOR ALL USING ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin') WITH CHECK ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin');

-- Policies for attempts and answers
CREATE POLICY "Users can view their own attempts" ON public.quiz_attempts FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can create their own attempts" ON public.quiz_attempts FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can view their own answers" ON public.user_answers FOR SELECT USING (EXISTS (SELECT 1 FROM quiz_attempts WHERE id = quiz_attempt_id AND user_id = auth.uid()));
CREATE POLICY "Users can insert their own answers" ON public.user_answers FOR INSERT WITH CHECK (EXISTS (SELECT 1 FROM quiz_attempts WHERE id = quiz_attempt_id AND user_id = auth.uid()));

-- RLS for Storage
CREATE POLICY "Allow authenticated users to read question images" ON storage.objects FOR SELECT USING (bucket_id = 'question_images');
CREATE POLICY "Allow admins to upload question images" ON storage.objects FOR INSERT WITH CHECK (bucket_id = 'question_images' AND (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin');